# #Rental App

# ###Prompt:
# # You will be creating an app that models the rental process. What types of objects might you have in an app that manages rentals? We are going to have a building, apartments and people.

# ### Part 1 - Creating the classes

# Create each of the classes for Person, Apartment, and Building

# A person should have the following attributes:

# * name
# * age
# * gender

# An apartment should have the following attributes:

# * name
# * price
# * sqft
# * num_beds
# * num_baths
# * renter (the person living in the apartment)

# A building should have the following attributes:

# * name
# * address
# * num_floors
# * apartments

# You should determine what methods & behavior are needed for each of your objects. It may help to look at the functionality required below.


class Person

  def initialize
    @tenant = tenant
  end

  def tenant
    return @tenant
  end

  def tenant_name=(tenant_name)
    @tenant_name = tenant_name
  end

  def tenant_name
    @tenant_name
  end

  def age=(age)
    @age = age
  end

  def age
    @age 
  end

  def gender=(gender)
    @gender = gender
  end

  def gender
    @gender 
  end

end 




class Apartment

  def initialize
    @apt = apt
    @tenant = []
  end

  def add_tenant=(add_tenant)
    @tenant.push(add_tenant)
  end

  def apt
    return @apt
  end

  def apt_num=(apt_num)
    @apt_num = apt_num
  end

  def rental_price=(rental_price)
    @rental_price = rental_price
  end

  def sqft=(sqft)
    @sqft = sqft
  end

  def num_bedrms=(num_bedrms)
    @num_bedrms = num_bedrms
  end

  def num_bathrms=(num_bathrms)
    @num_bathrms = num_bathrms
  end
end





class Building

  def initialize
    @building = building
    @apartment_data = []
  end

  def building
    @building
  end

  def name=(name)
    name = @name
  end

  def name
    @name
  end
end

fred_townsend = Person.new

  fred_townsend.tenant_name=("Fred Townsend")
  fred_townsend.age=(48)
  fred_townsend.gender=("Male")

  puts fred_townsend.tenant_name
  puts fred_townsend.age
  puts fred_townsend.gender

puts "-----------------------------"

new_apt = Apartment.new

  new_apt.add_tenant=(fred_townsend)

  puts new_apt


# ### Part 2 - Creating the program functionality & menu display

# * The program should instantiate a new building when it starts
new_bldg = Building.new

  new_bldg.name("The Concorde")

puts "--------------------------------------"
puts "Welcome to Da Best Building Rental App"
puts "::::::::::::MAIN MENU:::::::::::::::"

# * The program should display the following menu options
#   * View building details

puts "1. - (V)iew building details"

#   * Add an apartment to the building
puts "2. - Add an (A)partment to the building"

#   * Add a tenant
puts "3. Add a (T)enant"

#   * List the apartment directory for the building
puts "4. (L)ist the apartment directory for the building"

#   * Quit
puts "5. (Q)uit"

# * The program should return to the menu until the user quits

answer = gets.chomp.downcase


until answer == "q"


  case answer
    when "v"
      puts "works"


    when "a"
      puts "hi"

    when "t"
      puts "tenants?"

    when "l"
      puts "lsits"

    else 
      puts "Sorry that is not a valid menu option. Please try again."
    
  end
end






# #### View Building details
# * Tell the user the name, address, number of floors and number of apartments for the building

# #### Adding an apartment to the building
# * Make sure to get the appropriate input from the user to create your apartment
# * Add the new apartment to the building

# #### Adding a tenant to an apartment
# * Make sure to get the appropriate input from the user to create your person
# * Make sure to ask which apartment they want to live in
# * Add the person to that apartment
# * __NOTE:__ Only one person can live in each apartment (at least until you get to the bonus)

# #### Listing the apartments
# * List all of the apartments
# * If the apartment is unoccupied(no renters) you should say something like:
#   `Apt 1A is 750 sqft and has 1 bed and 1 bath. It costs $2500 a month`
# * If the apartment is occupied by a tenant, you should say something like:
#   `Jeff lives in Apt 1A`

# ### Bonus
# Increase the number of people that can live in each apartment to up to the number of bedrooms in the apartment. Adjust the rest of your program accordingly.
# Add functionality so that a tenant can leave the building.